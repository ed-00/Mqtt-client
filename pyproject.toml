[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mqtt-event-listener"
version = "v1.0.3"
description = "MQTT Event Listener with job tracking capabilities"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Abed Hameed", email = "aahameed@kth.se"}
]
maintainers = [
    {name = "Abed Hameed", email = "aahameed@kth.se"}
]
keywords = ["mqtt", "event", "listener", "job-tracking", "asyncio", "toml"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Topic :: Communications",
    "Framework :: AsyncIO",
]

dependencies = [
    "amqtt>=0.11.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "flake8>=6.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]

[project.urls]
"Homepage" = "https://github.com/ed-00/Mqtt-client"
"Bug Reports" = "https://github.com/ed-00/Mqtt-client/issues"
"Source" = "https://github.com/ed-00/Mqtt-client"

[tool.setuptools.packages.find]
include = ["Listener*"]

[tool.setuptools.package-data]
Listener = ["py.typed"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=Listener --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests", 
    "slow: marks tests as slow running",
]

[tool.coverage.run]
source = ["Listener"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 